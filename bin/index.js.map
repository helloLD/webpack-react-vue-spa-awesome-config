{"version":3,"file":"index.js","sources":["../cli/src/console-hello.js","../cli/src/parse-args.js","../cli/src/ensure-dir.js","../cli/src/copy-extrance.js","../cli/src/find-command.js","../cli/src/call-command.js","../cli/src/source-dest-files.js","../cli/src/start.js","../cli/src/index.js"],"sourcesContent":["export function consolehello() {\r\n    console.log(\"\\n\");\r\n    console.log(\"webpack-react-vue-spa-awesome-config\");\r\n    console.log(\"\\n\");\r\n    console.log(\r\n        `极速、零配置的 web 应用打包工具, 同时支持 react 和 vue 的单页面应用,提供开箱即用支持,基于webpack 4.x`\r\n    );\r\n    console.log(\"\\n\");\r\n    console.log(\r\n        \"Fast, zero-configuration web application packaging tool that supports both single-page applications for react and vue, out-of-the-box support\"\r\n    );\r\n    console.log(\"\\n\");\r\n    console.log(`\\nworking directory : ${process.cwd()}\\n`);\r\n    console.log(`\\ncommand filename : ${__filename}\\n`);\r\n}\r\n","/**\r\n * @param {string[]} args\r\n */\r\nfunction parseargs(args) {\r\n    const 参数obj = {};\r\n    args.filter(s => s.startsWith(\"--\"))\r\n        .map(s => /--(?<key>.+)=(?<value>.+)/g.exec(s))\r\n        .forEach(execArray => {\r\n            var _a, _b, _c;\r\n            const groups =\r\n                (_a = execArray) === null || _a === void 0 ? void 0 : _a.groups;\r\n            const key =\r\n                (_b = groups) === null || _b === void 0 ? void 0 : _b.key;\r\n            const value =\r\n                (_c = groups) === null || _c === void 0 ? void 0 : _c.value;\r\n            if (key && value) {\r\n                参数obj[key] = value;\r\n            }\r\n        });\r\n    return 参数obj;\r\n}\r\nexport { parseargs };\r\n","/**\r\n * @param {import(\"fs\").PathLike} p\r\n */\r\nexport default function 判断并创建目录(p) {\r\n    if (!fs.existsSync(p)) {\r\n        console.log(\"所需的目录不存在,创建目录\", p);\r\n        console.log(\"\\n\");\r\n        fs.mkdirSync(p);\r\n    }\r\n}\r\nimport fs from \"fs\";\r\n","import process from \"process\";\r\nconst pwddir = process.cwd();\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport 判断并创建目录 from \"./ensure-dir\";\r\n/**\r\n * @param {(import(\"fs\").PathLike)[]} sourcefiles\r\n * @param {string[]} destfiles\r\n */\r\nexport default function 生成入口文件(sourcefiles, destfiles) {\r\n    /**\r\n     * @param {import(\"fs\").PathLike} p\r\n     * @param {number} i\r\n     *\r\n     */\r\n    destfiles.forEach((p, i) => {\r\n        if (!fs.existsSync(p)) {\r\n            console.log(`inputfile  not exsited! ${p}\\n`);\r\n            console.log(`initialize inputfile from ${sourcefiles[i]}\\n`);\r\n            [\"public\", \"src\"]\r\n                .map(t => path.resolve(pwddir, t))\r\n                .forEach(e => 判断并创建目录(e));\r\n            fs.copyFileSync(sourcefiles[i], p);\r\n        }\r\n    });\r\n}\r\n","/**\r\n * @param {string} t\r\n */\r\nexport function commandfind(t) {\r\n    return path.join(\r\n        __dirname,\r\n        \"../\",\r\n        \"node_modules\",\r\n        \".bin\",\r\n        t.trim() + (process.platform === \"win32\" ? \".cmd\" : \"\")\r\n    );\r\n}\r\nimport path from \"path\";\r\nimport process from \"process\";\r\n","const { spawn } = require(\"child_process\");\r\n/**\r\n *\r\n * @param {string} command\r\n * @param { string[]} commandargs\r\n */\r\n\r\nfunction 执行命令(/* commandstring,  */ command, commandargs) {\r\n    // console.log(commandstring);\r\n    console.log(\"\\n\");\r\n    const runobj = spawn(command, commandargs, {\r\n        stdio: [\"pipe\", \"pipe\", \"pipe\"]\r\n    });\r\n    runobj.stdout.on(\"data\", data => {\r\n        console.log(\r\n            ` ${data}`\r\n                .split(\"\\n\")\r\n                .filter(t => t !== \"\")\r\n                .join(\"\\n\\n\")\r\n        );\r\n        console.log(\"\\n\");\r\n    });\r\n    runobj.stderr.on(\"data\", data => {\r\n        console.error(\r\n            ` ${data}`\r\n                .split(\"\\n\")\r\n                .filter(t => t !== \"\")\r\n                .join(\"\\n\\n\")\r\n        );\r\n        console.log(\"\\n\");\r\n    });\r\n}\r\nexport default 执行命令;\r\n","const path = require(\"path\");\r\n// const fs = require(\"fs\");\r\nconst pwddir = process.cwd();\r\n\r\nconst inputfiles = [\"public/index.html\", \"src/index.js\", \"public/favicon.ico\"];\r\nconst sourcefiles = inputfiles.map(p =>\r\n    path.resolve(__dirname, \"../\", \"release\", p)\r\n);\r\nconst destfiles = inputfiles.map(p => path.resolve(pwddir, p));\r\n\r\nexport { sourcefiles, destfiles };\r\n","import process from \"process\";\r\nimport 生成入口文件 from \"./copy-extrance\";\r\nimport path from \"path\";\r\nimport { commandfind } from \"./find-command\";\r\nimport 执行命令 from \"./call-command\";\r\nimport { sourcefiles, destfiles } from \"./source-dest-files\";\r\n\r\n/**\r\n * @param {string} operation\r\n * @param {{}} 参数object\r\n */\r\nexport function start(operation, 参数object) {\r\n    const 解析参数config = 参数object[\"config\"];\r\n    // const 解析参数mode = 参数object.mode;\r\n    const 参数reacthotreload = 参数object[\"react-hot-loader\"];\r\n    const defaultwebpackconfig = require.resolve(\r\n        path.resolve(__dirname, \"../\")\r\n    );\r\n    const 参数webpackconfigfile = 解析参数config\r\n        ? path.resolve(解析参数config)\r\n        : defaultwebpackconfig;\r\n    const 解析参数publicpath = 参数object[\"output-public-path\"];\r\n    const mode = 参数object[\"mode\"];\r\n    if (\"start\" === operation || \"development\" === mode) {\r\n        let command, commandargs;\r\n        process.env.NODE_ENV = \"development\";\r\n        生成入口文件(sourcefiles, destfiles);\r\n        command = commandfind(`webpack-dev-server `);\r\n        commandargs = [\r\n            \"--config\",\r\n            参数webpackconfigfile,\r\n            \"--mode=\" + process.env.NODE_ENV\r\n        ];\r\n        if (参数reacthotreload) {\r\n            commandargs.push(\"--react-hot-loader=\" + 参数reacthotreload);\r\n            //   console.log(`react-hot-loader :  ${参数reacthotreload}`);\r\n            console.log(\"\\n\");\r\n        }\r\n        console.log(\"\\n\");\r\n        console.log(`开发模式\r\n启动 webpack-dev-server`);\r\n        console.log(\"\\n\");\r\n        执行命令(/* commandstring, */ command, commandargs);\r\n    } else if (\"build\" === operation || \"production\" === mode) {\r\n        let command, commandargs;\r\n        console.log(\"\\n\");\r\n        console.log(`生产模式\r\n启动 webpack`);\r\n        console.log(\"\\n\");\r\n        process.env.NODE_ENV = \"production\";\r\n        生成入口文件(sourcefiles, destfiles);\r\n        command = commandfind(`webpack `);\r\n        commandargs = [\r\n            \"--config\",\r\n            参数webpackconfigfile,\r\n            \"--mode=\" + process.env.NODE_ENV\r\n        ];\r\n        if (解析参数publicpath && 解析参数publicpath.length) {\r\n            commandargs.push(\"--output-public-path=\" + 解析参数publicpath);\r\n            //   console.log(`  output-public-path  :  ${解析参数publicpath}`);\r\n            console.log(\"\\n\");\r\n        }\r\n        执行命令(/* commandstring, */ command, commandargs);\r\n    } else {\r\n        console.log(\"\\n\");\r\n        console.log(\"usage:\");\r\n        console.log(\"\\n\");\r\n        console.log(`开发模式\r\n启动 webpack-dev-server`);\r\n        console.log(\"\\n\");\r\n        console.log(\r\n            \"webpack-react-vue-spa-awesome-config start --mode=development\"\r\n        );\r\n        console.log(\"\\n\");\r\n        console.log(`生产模式\r\n    启动 webpack`);\r\n        console.log(\"\\n\");\r\n        console.log(\r\n            \"webpack-react-vue-spa-awesome-config build --mode=production\"\r\n        );\r\n        console.log(\"\\n\");\r\n    }\r\n}\r\n","// #!/usr/bin/env node\r\n\"use strict\";\r\nimport process from \"process\";\r\nimport { consolehello } from \"./console-hello\";\r\n// import 判断并创建目录 from \"./ensure-dir\";\r\nimport { parseargs } from \"./parse-args\";\r\nimport { start } from \"./start\";\r\n\r\nconsolehello();\r\n// console.log(\"输入的参数:\");\r\n// console.log(JSON.stringify(process.argv, null, 4));\r\nconst inargs = process.argv.slice(1);\r\nconst operation = inargs.includes(\"start\")\r\n    ? \"start\"\r\n    : inargs.includes(\"build\")\r\n    ? \"build\"\r\n    : undefined;\r\nconst 参数object = parseargs(inargs);\r\nconsole.log(\"解析的参数:\");\r\nconsole.log(JSON.stringify(参数object, null, 4));\r\n\r\nstart(operation, 参数object);\r\n"],"names":["consolehello","console","log","process","cwd","__filename","parseargs","args","参数obj","filter","s","startsWith","map","_wrapRegExp","exec","forEach","execArray","_a","_b","_c","groups","key","value","判断并创建目录","p","fs","existsSync","mkdirSync","pwddir","生成入口文件","sourcefiles","destfiles","i","t","path","resolve","e","copyFileSync","commandfind","join","__dirname","trim","platform","require","spawn","执行命令","command","commandargs","runobj","stdio","stdout","on","data","split","stderr","error","inputfiles","start","operation","参数object","解析参数config","参数reacthotreload","defaultwebpackconfig","参数webpackconfigfile","解析参数publicpath","mode","env","NODE_ENV","push","length","inargs","argv","slice","includes","undefined","JSON","stringify"],"mappings":";;;;;;;;;;;;;AAAO,SAASA;IACZC,QAAQC,IAAI;IACZD,QAAQC,IAAI;IACZD,QAAQC,IAAI;IACZD,QAAQC;IAGRD,QAAQC,IAAI;IACZD,QAAQC,IACJ;IAEJD,QAAQC,IAAI;IACZD,QAAQC,oCAA6BC,QAAQC;IAC7CH,QAAQC,mCAA4BG;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVxC,SAASC,UAAUC;QACTC,kBAAQ;IACdD,KAAKE,QAAO,SAAAC;eAAKA,EAAEC,WAAW;QACzBC,KAAI,SAAAF;eAAKG;;;WAA6BC,KAAKJ;QAC3CK,SAAQ,SAAAC;YACDC,IAAIC,IAAIC;YACNC,UACDH,KAAKD,eAAe,QAAQC,YAAY,SAAS,IAAIA,GAAGG;YACvDC,OACDH,KAAKE,YAAY,QAAQF,YAAY,SAAS,IAAIA,GAAGG;YACpDC,SACDH,KAAKC,YAAY,QAAQD,YAAY,SAAS,IAAIA,GAAGG;YACtDD,OAAOC,OAAO;YACdd,gBAAMa,OAAOC;;;WAGlBd;;;AChBI,SAASe,2CAAQC;SACvBC,GAAGC,WAAWF,IAAI;QACnBvB,QAAQC,IAAI,6EAAiBsB;QAC7BvB,QAAQC,IAAI;QACZuB,GAAGE,UAAUH;;;;ACNrB,IAAMI,SAASzB,UAAQC;;AAQR,SAASyB,qCAAOC,aAAaC;IAMxCA,UAAUhB,SAAQ,SAACS,GAAGQ;aACbP,GAAGC,WAAWF,IAAI;YACnBvB,QAAQC,sCAA+BsB;YACvCvB,QAAQC,wCAAiC4B,YAAYE;cACpD,UAAU,QACNpB,KAAI,SAAAqB;uBAAKC,OAAKC,QAAQP,QAAQK;gBAC9BlB,SAAQ,SAAAqB;uBAAKb,2CAAQa;;YAC1BX,GAAGY,aAAaP,YAAYE,IAAIR;;;;;ACnBrC,SAASc,YAAYL;WACjBC,OAAKK,KACRC,WACA,OACA,gBACA,QACAP,EAAEQ,UAAUtC,UAAQuC,aAAa,UAAU,SAAS;;;eCT1CC,QAAQ,kBAAlBC,iBAAAA;;AAOR,SAASC,yBAA2BC,SAASC;IAEzC9C,QAAQC,IAAI;QACN8C,SAASJ,MAAME,SAASC,aAAa;QACvCE,OAAO,EAAC,QAAQ,QAAQ;;IAE5BD,OAAOE,OAAOC,GAAG,SAAQ,SAAAC;QACrBnD,QAAQC,IACJ,WAAIkD,MACCC,MAAM,MACN5C,QAAO,SAAAwB;mBAAKA,MAAM;YAClBM,KAAK;QAEdtC,QAAQC,IAAI;;IAEhB8C,OAAOM,OAAOH,GAAG,SAAQ,SAAAC;QACrBnD,QAAQsD,MACJ,WAAIH,MACCC,MAAM,MACN5C,QAAO,SAAAwB;mBAAKA,MAAM;YAClBM,KAAK;QAEdtC,QAAQC,IAAI;;;;AC7BpB,IAAMgC,OAAOS,QAAQ;;AAErB,IAAMf,WAASzB,QAAQC;;AAEvB,IAAMoD,aAAa,EAAC,qBAAqB,gBAAgB;;AACzD,IAAM1B,cAAc0B,WAAW5C,KAAI,SAAAY;WAC/BU,KAAKC,QAAQK,WAAW,OAAO,WAAWhB;;;AAE9C,IAAMO,YAAYyB,WAAW5C,KAAI,SAAAY;WAAKU,KAAKC,QAAQP,UAAQJ;;;ACGpD,SAASiC,MAAMC,WAAWC;QACvBC,iCAAaD,mBAAS;QAEtBE,6BAAmBF,mBAAS;QAC5BG,uBAAuBnB,QAAQR,QACjCD,OAAKC,QAAQK,WAAW;QAEtBuB,gCAAsBH,iCACtB1B,OAAKC,QAAQyB,kCACbE;QACAE,qCAAiBL,mBAAS;QAC1BM,OAAON,mBAAS;QAClB,YAAYD,aAAa,kBAAkBO,MAAM;YAC7CnB,SAASC;QACb5C,UAAQ+D,IAAIC,WAAW;QACvBtC,qCAAOC,aAAaC;QACpBe,UAAUR;QACVS,cAAc,EACV,YACAgB,+BACA,YAAY5D,UAAQ+D,IAAIC;YAExBN,4BAAkB;YAClBd,YAAYqB,KAAK,wBAAwBP;YAEzC5D,QAAQC,IAAI;;QAEhBD,QAAQC,IAAI;QACZD,QAAQC;QAERD,QAAQC,IAAI;QACZ2C,yBAA0BC,SAASC;WAChC,IAAI,YAAYW,aAAa,iBAAiBO,MAAM;YACnDnB,UAASC;QACb9C,QAAQC,IAAI;QACZD,QAAQC;QAERD,QAAQC,IAAI;QACZC,UAAQ+D,IAAIC,WAAW;QACvBtC,qCAAOC,aAAaC;QACpBe,WAAUR;QACVS,eAAc,EACV,YACAgB,+BACA,YAAY5D,UAAQ+D,IAAIC;YAExBH,sCAAkBA,mCAAeK,QAAQ;YACzCtB,aAAYqB,KAAK,0BAA0BJ;YAE3C/D,QAAQC,IAAI;;QAEhB2C,yBAA0BC,UAASC;WAChC;QACH9C,QAAQC,IAAI;QACZD,QAAQC,IAAI;QACZD,QAAQC,IAAI;QACZD,QAAQC;QAERD,QAAQC,IAAI;QACZD,QAAQC,IACJ;QAEJD,QAAQC,IAAI;QACZD,QAAQC;QAERD,QAAQC,IAAI;QACZD,QAAQC,IACJ;QAEJD,QAAQC,IAAI;;;;AC/EpBF;;AAUA,IAAMsE,SAASnE,UAAQoE,KAAKC,MAAM;;AAClC,IAAMd,YAAYY,OAAOG,SAAS,WAC5B,UACAH,OAAOG,SAAS,WAChB,UACAC;;AACN,IAAMf,qBAAWrD,UAAUgE;;AAC3BrE,QAAQC,IAAI;;AACZD,QAAQC,IAAIyE,KAAKC,UAAUjB,oBAAU,MAAM;;AAE3CF,MAAMC,WAAWC"}