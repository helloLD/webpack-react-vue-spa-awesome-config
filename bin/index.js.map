{"version":3,"file":"index.js","sources":["../cli/src/copy-extrance.js","../cli/src/ensure-dir.js","../cli/src/find-command.js","../cli/src/call-command.js","../cli/src/source-dest-files.js","../cli/src/console-hello.js","../cli/src/index.js","../cli/src/parse-args.js","../cli/src/start.js"],"sourcesContent":["import process from \"process\";\r\nconst pwddir = process.cwd();\r\nimport fs from \"fs\";\r\nimport path from \"path\";\r\nimport 判断并创建目录 from \"./ensure-dir\";\r\n/**\r\n * @param {(import(\"fs\").PathLike)[]} sourcefiles\r\n * @param {string[]} destfiles\r\n */\r\nexport default function 生成入口文件(sourcefiles, destfiles) {\r\n    /**\r\n     * @param {import(\"fs\").PathLike} p\r\n     * @param {number} i\r\n     *\r\n     */\r\n    destfiles.forEach((p, i) => {\r\n        if (!fs.existsSync(p)) {\r\n            console.log(`inputfile  not exsited! ${p}\\n`);\r\n            console.log(`initialize inputfile from ${sourcefiles[i]}\\n`);\r\n            [\"public\", \"src\"]\r\n                .map(t => path.resolve(pwddir, t))\r\n                .forEach(e => 判断并创建目录(e));\r\n            fs.copyFileSync(sourcefiles[i], p);\r\n        }\r\n    });\r\n}\r\n","/**\r\n * @param {import(\"fs\").PathLike} p\r\n */\r\nexport default function 判断并创建目录(p) {\r\n    if (!fs.existsSync(p)) {\r\n        console.log(\"所需的目录不存在,创建目录\", p);\r\n        console.log(\"\\n\");\r\n        fs.mkdirSync(p);\r\n    }\r\n}\r\nimport fs from \"fs\";\r\n","/**\r\n * @param {string} t\r\n */\r\nexport function commandfind(t) {\r\n    return path.join(\r\n        __dirname,\r\n        \"../\",\r\n        \"node_modules\",\r\n        \".bin\",\r\n        t.trim() + (process.platform === \"win32\" ? \".cmd\" : \"\")\r\n    );\r\n}\r\nimport path from \"path\";\r\nimport process from \"process\";\r\n","import { spawn } from \"child_process\";\r\n/**\r\n *\r\n * @param {string} command\r\n * @param { string[]} commandargs\r\n */\r\n\r\nfunction 执行命令(/* commandstring,  */ command, commandargs) {\r\n    // console.log(commandstring);\r\n    console.log(\"\\n\");\r\n    const runobj = spawn(command, commandargs, {\r\n        stdio: [\"pipe\", \"pipe\", \"pipe\"]\r\n    });\r\n    runobj.stdout.on(\"data\", data => {\r\n        console.log(\r\n            ` ${data}`\r\n                .split(\"\\n\")\r\n                .filter(t => t !== \"\")\r\n                .join(\"\\n\\n\")\r\n        );\r\n        console.log(\"\\n\");\r\n    });\r\n    runobj.stderr.on(\"data\", data => {\r\n        console.error(\r\n            ` ${data}`\r\n                .split(\"\\n\")\r\n                .filter(t => t !== \"\")\r\n                .join(\"\\n\\n\")\r\n        );\r\n        console.log(\"\\n\");\r\n    });\r\n}\r\nexport default 执行命令;\r\n","const path = require(\"path\");\r\n// const fs = require(\"fs\");\r\nconst pwddir = process.cwd();\r\n\r\nconst inputfiles = [\"public/index.html\", \"src/index.js\", \"public/favicon.ico\"];\r\nconst sourcefiles = inputfiles.map(p =>\r\n    path.resolve(__dirname, \"../\", \"release\", p)\r\n);\r\nconst destfiles = inputfiles.map(p => path.resolve(pwddir, p));\r\n\r\nexport { sourcefiles, destfiles };\r\n","export function consolehello() {\r\n    console.log(\"\\n\");\r\n    console.log(\"webpack-react-vue-spa-awesome-config\");\r\n    console.log(\"\\n\");\r\n    console.log(\r\n        `极速、零配置的 web 应用打包工具, 同时支持 react 和 vue 的单页面应用,提供开箱即用支持,基于webpack 4.x`\r\n    );\r\n    console.log(\"\\n\");\r\n    console.log(\r\n        \"Fast, zero-configuration web application packaging tool that supports both single-page applications for react and vue, out-of-the-box support\"\r\n    );\r\n    console.log(\"\\n\");\r\n    console.log(`\\nworking directory : ${process.cwd()}\\n`);\r\n    console.log(`\\ncommand filename : ${__filename}\\n`);\r\n}\r\n","// #!/usr/bin/env node\r\n\"use strict\";\r\nimport process from \"process\";\r\nimport { consolehello } from \"./console-hello\";\r\n// import 判断并创建目录 from \"./ensure-dir\";\r\nimport { parseargs } from \"./parse-args\";\r\nimport { start } from \"./start\";\r\n\r\nconsolehello();\r\n// console.log(\"输入的参数:\");\r\n// console.log(JSON.stringify(process.argv, null, 4));\r\nconst inargs = process.argv.slice(1);\r\nconst operation = inargs.includes(\"start\")\r\n    ? \"start\"\r\n    : inargs.includes(\"build\")\r\n    ? \"build\"\r\n    : undefined;\r\nconst 参数object = parseargs(inargs);\r\nconsole.log(\"解析的参数:\");\r\nconsole.log(JSON.stringify(参数object, null, 4));\r\n\r\nstart(operation, 参数object);\r\n","/**\r\n * @param {string[]} args\r\n */\r\nfunction parseargs(args) {\r\n    const 参数obj = {};\r\n    args.filter(s => s.startsWith(\"--\"))\r\n        .map(s => /--(?<key>.+)=(?<value>.+)/g.exec(s))\r\n        .forEach(execArray => {\r\n            var _a, _b, _c;\r\n            const groups =\r\n                (_a = execArray) === null || _a === void 0 ? void 0 : _a.groups;\r\n            const key =\r\n                (_b = groups) === null || _b === void 0 ? void 0 : _b.key;\r\n            const value =\r\n                (_c = groups) === null || _c === void 0 ? void 0 : _c.value;\r\n            if (key && value) {\r\n                参数obj[key] = value;\r\n            }\r\n        });\r\n    return 参数obj;\r\n}\r\nexport { parseargs };\r\n","import process from \"process\";\r\nimport 生成入口文件 from \"./copy-extrance\";\r\nimport path from \"path\";\r\nimport { commandfind } from \"./find-command\";\r\nimport 执行命令 from \"./call-command\";\r\nimport { sourcefiles, destfiles } from \"./source-dest-files\";\r\n\r\n/**\r\n * @param {string} operation\r\n * @param {{}} 参数object\r\n */\r\nexport function start(operation, 参数object) {\r\n    const 解析参数config = 参数object[\"config\"];\r\n    // const 解析参数mode = 参数object.mode;\r\n    const 参数reacthotreload = 参数object[\"react-hot-loader\"];\r\n    const defaultwebpackconfig = require.resolve(\r\n        path.resolve(__dirname, \"../\")\r\n    );\r\n    const 参数webpackconfigfile = 解析参数config\r\n        ? path.resolve(解析参数config)\r\n        : defaultwebpackconfig;\r\n    const 解析参数publicpath = 参数object[\"output-public-path\"];\r\n    const mode = 参数object[\"mode\"];\r\n    if (\"start\" === operation || \"development\" === mode) {\r\n        let command, commandargs;\r\n        process.env.NODE_ENV = \"development\";\r\n        生成入口文件(sourcefiles, destfiles);\r\n        command = commandfind(`webpack-dev-server `);\r\n        commandargs = [\r\n            \"--config\",\r\n            参数webpackconfigfile,\r\n            \"--mode=\" + process.env.NODE_ENV\r\n        ];\r\n        if (参数reacthotreload) {\r\n            commandargs.push(\"--react-hot-loader=\" + 参数reacthotreload);\r\n            //   console.log(`react-hot-loader :  ${参数reacthotreload}`);\r\n            console.log(\"\\n\");\r\n        }\r\n        console.log(\"\\n\");\r\n        console.log(`开发模式\r\n启动 webpack-dev-server`);\r\n        console.log(\"\\n\");\r\n        执行命令(/* commandstring, */ command, commandargs);\r\n    } else if (\"build\" === operation || \"production\" === mode) {\r\n        let command, commandargs;\r\n        console.log(\"\\n\");\r\n        console.log(`生产模式\r\n启动 webpack`);\r\n        console.log(\"\\n\");\r\n        process.env.NODE_ENV = \"production\";\r\n        生成入口文件(sourcefiles, destfiles);\r\n        command = commandfind(`webpack `);\r\n        commandargs = [\r\n            \"--config\",\r\n            参数webpackconfigfile,\r\n            \"--mode=\" + process.env.NODE_ENV\r\n        ];\r\n        if (解析参数publicpath && 解析参数publicpath.length) {\r\n            commandargs.push(\"--output-public-path=\" + 解析参数publicpath);\r\n            //   console.log(`  output-public-path  :  ${解析参数publicpath}`);\r\n            console.log(\"\\n\");\r\n        }\r\n        执行命令(/* commandstring, */ command, commandargs);\r\n    } else {\r\n        console.log(\"\\n\");\r\n        console.log(\"usage:\");\r\n        console.log(\"\\n\");\r\n        console.log(`开发模式\r\n启动 webpack-dev-server`);\r\n        console.log(\"\\n\");\r\n        console.log(\r\n            \"webpack-react-vue-spa-awesome-config start --mode=development\"\r\n        );\r\n        console.log(\"\\n\");\r\n        console.log(`生产模式\r\n    启动 webpack`);\r\n        console.log(\"\\n\");\r\n        console.log(\r\n            \"webpack-react-vue-spa-awesome-config build --mode=production\"\r\n        );\r\n        console.log(\"\\n\");\r\n        process.exit(1);\r\n    }\r\n}\r\n"],"names":["pwddir","process","cwd","生成入口文件","sourcefiles","destfiles","forEach","p","i","fs","existsSync","console","log","map","t","path","resolve","e","mkdirSync","判断并创建目录","copyFileSync","commandfind","join","__dirname","trim","platform","执行命令","command","commandargs","runobj","spawn","stdio","stdout","on","data","split","filter","stderr","error","require","inputfiles","__filename","参数obj","inargs","argv","slice","operation","includes","undefined","参数object","s","startsWith","_wrapRegExp","exec","execArray","_a","_b","_c","groups","key","value","JSON","stringify","解析参数config","参数reacthotreload","defaultwebpackconfig","参数webpackconfigfile","解析参数publicpath","mode","env","NODE_ENV","push","length","exit","start"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAMA,IAASC,EAAQC;;AAQR,SAASC,EAAOC,GAAaC;IAMxCA,EAAUC,SAAQ,SAACC,GAAGC;QACbC,EAAGC,WAAWH,OACfI,QAAQC,sCAA+BL,WACvCI,QAAQC,wCAAiCR,EAAYI;UACpD,UAAU,QACNK,KAAI,SAAAC;mBAAKC,EAAKC,QAAQhB,GAAQc;YAC9BR,SAAQ,SAAAW;mBClBV,SAAiBV;gBACvBE,EAAGC,WAAWH,OACfI,QAAQC,IAAI,6EAAiBL;gBAC7BI,QAAQC,IAAI,OACZH,EAAGS,UAAUX;aDcSY,CAAQF;aAC1BR,EAAGW,aAAahB,EAAYI,IAAID;;;;AEnBrC,SAASc,EAAYP;WACjBC,EAAKO,KACRC,WACA,OACA,gBACA,QACAT,EAAEU,UAA+B,YAArBvB,EAAQwB,WAAuB,SAAS;;;ACF5D,SAASC,EAA2BC,GAASC;IAEzCjB,QAAQC,IAAI;QACNiB,IAASC,QAAMH,GAASC,GAAa;QACvCG,OAAO,EAAC,QAAQ,QAAQ;;IAE5BF,EAAOG,OAAOC,GAAG,SAAQ,SAAAC;QACrBvB,QAAQC,IACJ,WAAIsB,GACCC,MAAM,MACNC,QAAO,SAAAtB;mBAAW,OAANA;YACZQ,KAAK,UAEdX,QAAQC,IAAI;SAEhBiB,EAAOQ,OAAOJ,GAAG,SAAQ,SAAAC;QACrBvB,QAAQ2B,MACJ,WAAIJ,GACCC,MAAM,MACNC,QAAO,SAAAtB;mBAAW,OAANA;YACZQ,KAAK,UAEdX,QAAQC,IAAI;;;;AC7BpB,IAAMG,IAAOwB,QAAQ,SAEfvC,IAASC,QAAQC,OAEjBsC,IAAa,EAAC,qBAAqB,gBAAgB,wBACnDpC,IAAcoC,EAAW3B,KAAI,SAAAN;WAC/BQ,EAAKC,QAAQO,WAAW,OAAO,WAAWhB;KAExCF,IAAYmC,EAAW3B,KAAI,SAAAN;WAAKQ,EAAKC,QAAQhB,GAAQO;;;ACPvDI,QAAQC,IAAI,OACZD,QAAQC,IAAI,yCACZD,QAAQC,IAAI;AACZD,QAAQC;AAGRD,QAAQC,IAAI,OACZD,QAAQC,IACJ;AAEJD,QAAQC,IAAI,OACZD,QAAQC,oCAA6BX,QAAQC;AAC7CS,QAAQC,mCAA4B6B;;ACFxC,ICPUC,GDOJC,IAAS1C,EAAQ2C,KAAKC,MAAM,IAC5BC,IAAYH,EAAOI,SAAS,WAC5B,UACAJ,EAAOI,SAAS,WAChB,eACAC,GACAC,KCbIP,IAAQ;ADaSC,ECZlBP,QAAO,SAAAc;WAAKA,EAAEC,WAAW;IACzBtC,KAAI,SAAAqC;WAAKE;;;OAA6BC,KAAKH;IAC3C5C,SAAQ,SAAAgD;QACDC,GAAIC,GAAIC,GACNC,IACmB,UAApBH,IAAKD,WAA8B,MAAPC,SAAgB,IAASA,EAAGG,QACvDC,IACgB,UAAjBH,IAAKE,WAA2B,MAAPF,SAAgB,IAASA,EAAGG,KACpDC,IACgB,UAAjBH,IAAKC,WAA2B,MAAPD,SAAgB,IAASA,EAAGG;IACtDD,KAAOC,MACPlB,EAAMiB,KAAOC;KAGlBlB;;ADDX/B,QAAQC,IAAI,oCACZD,QAAQC,IAAIiD,KAAKC,UAAUb,GAAU,MAAM;AERpC,SAAeH,GAAWG;QAarBtB,GAASC,GAZXmC,IAAad,EAAQ,QAErBe,IAAmBf,EAAS,qBAC5BgB,IAAuB1B,QAAQvB,QACjCD,EAAKC,QAAQO,WAAW,SAEtB2C,IAAsBH,IACtBhD,EAAKC,QAAQ+C,KACbE,GACAE,IAAiBlB,EAAS,uBAC1BmB,IAAOnB,EAAQ;QACjB,YAAYH,KAAa,kBAAkBsB,GAE3CnE,EAAQoE,IAAIC,WAAW,eACvBnE,EAAOC,GAAaC;IACpBsB,IAAUN,0BACVO,IAAc,EACV,YACAsC,GACA,YAAYjE,EAAQoE,IAAIC;IAExBN,MACApC,EAAY2C,KAAK,wBAAwBP,IAEzCrD,QAAQC,IAAI,QAEhBD,QAAQC,IAAI;IACZD,QAAQC,kEAERD,QAAQC,IAAI;IACZc,EAA0BC,GAASC,SAChC,IAAI,YAAYkB,KAAa,iBAAiBsB,GAAM;YACnDzC,GAASC;QACbjB,QAAQC,IAAI,OACZD,QAAQC;QAERD,QAAQC,IAAI,OACZX,EAAQoE,IAAIC,WAAW,cACvBnE,EAAOC,GAAaC,IACpBsB,IAAUN,eACVO,IAAc,EACV,YACAsC,GACA,YAAYjE,EAAQoE,IAAIC;QAExBH,KAAkBA,EAAeK,WACjC5C,EAAY2C,KAAK,0BAA0BJ,IAE3CxD,QAAQC,IAAI,QAEhBc,EAA0BC,GAASC;WAEnCjB,QAAQC,IAAI,OACZD,QAAQC,IAAI,WACZD,QAAQC,IAAI,OACZD,QAAQC;IAERD,QAAQC,IAAI,OACZD,QAAQC,IACJ;IAEJD,QAAQC,IAAI,OACZD,QAAQC;IAERD,QAAQC,IAAI,OACZD,QAAQC,IACJ;IAEJD,QAAQC,IAAI,OACZX,EAAQwE,KAAK;CF5DrBC,CAAM5B,GAAWG"}